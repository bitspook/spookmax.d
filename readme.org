#+PROPERTY: header-args :tangle ./init.el

#+begin_quote
1. Clone this repo to ~/.emacs.d
2. Open =readme.org= in emacs
3. Press =C-c C-v t= to tangle all the blocks
4. Restart Emacs. straight.el will now take a bunch of time cloning
   all the packages, and then you'll be ready for a spooky Emacs.
#+end_quote

PS I am slowly transitioning from spacemacs, so this configuration
isn't exactly complete. Use it for reference or tricks. I'd recommend
doom or spacemacs if you're looking for something that'll let you get
started with Emacs quickly.

* Spook max ðŸ‘»
My [[https://github.com/raxod502/straight.el][straight.el]] based emacs configuration.

- Bootstrap

  #+begin_src elisp :tangle ./early-init.el
    ;;; core-ui.el -*- lexical-binding: t; -*-
    (setq package-enable-at-startup nil)

    ;;
    ;;; Bootstrap

    ;; Contrary to what many Emacs users have in their configs, you don't need
    ;; more than this to make UTF-8 the default coding system:
    (set-language-environment "UTF-8")

    ;; set-language-enviornment sets default-input-method, which is unwanted
    (setq default-input-method nil)
  #+end_src

** Initialize straight.el itself
:PROPERTIES:
:ID:       635cd7c4-e3cb-4a0e-a722-6fa8f2035ea0
:END:

#+begin_src elisp :tangle ./init.el
  (defvar bootstrap-version)
  (setq straight-use-package-by-default t)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  #+end_src

  - Install =use-package=
  #+begin_src elisp
  (straight-use-package 'use-package)
  #+end_src

** Helper utilities

#+begin_src elisp
  (defmacro spook-defkeymap (name prefix &rest bindings)
    "Create a new NAME-keymap bound to PREFIX, with BINDINGS.

  Usage:
    (spook-defkeymap \"spook-git\" \"C-c g\"
      '(\"s\" . magit-status))
  "
    (let* ((keymap-name (intern (concat name "-keymap")))
           (keymap-alias (intern name))
           (keymap-bindings (mapcar
                             (lambda (binding)
                               (let ((binding (eval binding)))
                                 `(define-key ,keymap-name (kbd ,(car binding)) #',(cdr binding))))
                             bindings)))
      `(progn
         (defvar ,keymap-name (make-sparse-keymap))
         (defalias ',keymap-alias ,keymap-name)
         (global-set-key (kbd ,prefix) ',keymap-alias)
         ,@keymap-bindings)))
#+end_src
** Preliminary setup
:PROPERTIES:
:ID:       704db7c8-f339-48cc-8e2c-d680da5899fd
:END:

- Start emacs as a server

  #+begin_src elisp
    (server-start)
  #+end_src

- Unset annoying keybindings

  #+begin_src elisp
    (global-unset-key (kbd "C-x C-z"))
  #+end_src

- Disable the ugly-ass toolbar, scroll-bars and menu-bar

  #+begin_src elisp :tangle ./init.el
    (setq inhibit-startup-screen t
          use-dialog-box nil)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (tooltip-mode -1)
  #+end_src

- Make emacs a little transparent
 #+begin_src elisp :tangle ./init.el
   (set-frame-parameter (selected-frame) 'alpha '(90 . 50))
   (add-to-list 'default-frame-alist '(alpha . (90 . 50)))
 #+end_src

- UI fixes copied from Doom
  https://github.com/hlissner/doom-emacs/blob/develop/core/core-ui.el

  - Scrolling
    #+begin_src elisp
      ;;; Scrolling

      (setq hscroll-margin 2
            hscroll-step 1
            ;; Emacs spends too much effort recentering the screen if you scroll the
            ;; cursor more than N lines past window edges (where N is the settings of
            ;; `scroll-conservatively'). This is especially slow in larger files
            ;; during large-scale scrolling commands. If kept over 100, the window is
            ;; never automatically recentered.
            scroll-conservatively 101
            scroll-margin 0
            scroll-preserve-screen-position t
            ;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
            ;; for tall lines.
            auto-window-vscroll nil
            ;; mouse
            mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
            mouse-wheel-scroll-amount-horizontal 2)
    #+end_src

  - Cursors

    #+begin_src elisp
      ;;; Cursor

      ;; The blinking cursor is distracting, but also interferes with cursor settings
      ;; in some minor modes that try to change it buffer-locally (like treemacs) and
      ;; can cause freezing for folks (esp on macOS) with customized & color cursors.
      (blink-cursor-mode -1)

      ;; Don't blink the paren matching the one at point, it's too distracting.
      (setq blink-matching-paren nil)

      ;; Don't stretch the cursor to fit wide characters, it is disorienting,
      ;; especially for tabs.
      (setq x-stretch-cursor nil)
    #+end_src

  - Window/Frame

    #+begin_src elisp
      ;; A simple frame title
      (setq frame-title-format '("%b")
            icon-title-format frame-title-format)

      ;; Don't resize the frames in steps; it looks weird, especially in tiling window
      ;; managers, where it can leave unseemly gaps.
      (setq frame-resize-pixelwise t)

      ;; But do not resize windows pixelwise, this can cause crashes in some cases
      ;; when resizing too many windows at once or rapidly.
      (setq window-resize-pixelwise nil)

      ;; Favor vertical splits over horizontal ones. Monitors are trending toward
      ;; wide, rather than tall.
      (setq split-width-threshold 160
            split-height-threshold nil)
    #+end_src

  - Minibuffer

    #+begin_src elisp
      ;;
      ;;; Minibuffer

      ;; Allow for minibuffer-ception. Sometimes we need another minibuffer command
      ;; while we're in the minibuffer.
      (setq enable-recursive-minibuffers t)

      ;; Show current key-sequence in minibuffer ala 'set showcmd' in vim. Any
      ;; feedback after typing is better UX than no feedback at all.
      (setq echo-keystrokes 0.02)

      ;; Expand the minibuffer to fit multi-line text displayed in the echo-area. This
      ;; doesn't look too great with direnv, however...
      (setq resize-mini-windows 'grow-only)

      ;; Typing yes/no is obnoxious when y/n will do
      (fset #'yes-or-no-p #'y-or-n-p)

      ;; Try to keep the cursor out of the read-only portions of the minibuffer.
      (setq minibuffer-prompt-properties '(read-only t intangible t cursor-intangible t face minibuffer-prompt))
      (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

      ;; Don't resize the frames in steps; it looks weird, especially in tiling window
      ;; managers, where it can leave unseemly gaps.
      (setq frame-resize-pixelwise t)

      ;; But do not resize windows pixelwise, this can cause crashes in some cases
      ;; when resizing too many windows at once or rapidly.
      (setq window-resize-pixelwise nil)
    #+end_src

- Allow selection to be deleted, generally expected behavior during
  editing. I tried to not have this on by default, but I am finding
  that to be increasingly annoying.

  #+begin_src elisp
    (delete-selection-mode +1)
  #+end_src

- Indentation and whitespace

  #+begin_src elisp
    (setq spook--indent-width 2)
    (setq-default tab-width spook--indent-width)
    (setq-default indent-tabs-mode nil)
  #+end_src

  From: https://github.com/susam/emfy/blob/main/.emacs#L26
  #+begin_src elisp
    ;; Show stray whitespace.
    (setq-default show-trailing-whitespace t)
    (setq-default indicate-empty-lines t)
    (setq-default indicate-buffer-boundaries 'left)

    ;; Consider a period followed by a single space to be end of sentence.
    (setq sentence-end-double-space nil)

    (setq create-lockfiles nil)
  #+end_src

  I got sick of manually calling whitespace cleanup all the trim.
  Cleanup whitespace.

  #+begin_src elisp
    (use-package whitespace-cleanup-mode
      :config
      (global-whitespace-cleanup-mode +1))
  #+end_src

- Introspection
  :PROPERTIES:
  :ID:       e17d83de-251c-4407-b2ea-ca9c428e5ea1
  :END:

  Setup =which-key= for easy keys discovery

  #+begin_src elisp
    (use-package which-key
      :config
      (which-key-mode t))
  #+end_src

- Highlighting
  :PROPERTIES:
  :ID:       79c1e2a9-c52e-4660-ba70-f6f1f98f7d4e
  :END:

  Setting this to =nil= for now; until I configure a decent theme which don't
  cause the problem. The problem is that, with the default themes at least, the
  highlighted line and color of selection is same. So it become impossible to
  tell which part is selection and which is highlighted line.

  #+begin_src elisp
    (use-package highlight-symbol
      :hook (prog-mode . highlight-symbol-mode)
      :config
      (setq highlight-symbol-idle-delay 0.3))
  #+end_src

- Line numbers
  :PROPERTIES:
  :ID:       2b554619-a8c0-4bd0-8ab0-8107c52a6e7e
  :END:

  #+begin_src elisp
  (global-display-line-numbers-mode 1)
  #+end_src

- Window management

  #+begin_src elisp
    (spook-defkeymap "spook-windows" "C-c w"
      '("-" . split-window-below)
      '("/" . split-window-right)
      '("d" . delete-window)
      '("m" . delete-other-windows)
      '("M" . window-swap-states)
      '("o" . other-window)
      '("h" . windmove-left)
      '("j" . windmove-down)
      '("k" . windmove-up)
      '("l" . windmove-right))
  #+end_src

  Eyebrowse allows saving current windows state, and switch to a new
  one to do one-off operations or work on different projects very
  easy. I should perhaps try perspective sometime.

  #+begin_src elisp
    (use-package eyebrowse
      :config (eyebrowse-mode t))
  #+end_src

- Buffer management

  #+begin_src elisp
    (spook-defkeymap
     "spook-buffers" "C-c b"
     '("n" . next-buffer)
     '("p" . previous-buffer)
     '("b" . ivy-switch-buffer)
     '("d" . kill-current-buffer))
  #+end_src

- [Ma]git

  Magit uses =project-switch-commands= which are present only in more
  recent project.el project.

  #+begin_src elisp
    (straight-use-package 'project)
  #+end_src

  #+begin_src elisp
  (use-package magit
    :config
    (setq magit-display-buffer-function
          'magit-display-buffer-fullframe-status-v1))
  #+end_src

  - Buncha nice keybindings.

    #+begin_src elisp
      (spook-defkeymap "spook-git" "C-c g"
        '("s" . magit-status)
        '("b" . magit-blame)
        '("g" . magit-dispatch))
    #+end_src

  - Use [[https://github.com/dandavison/delta][delta]] for prettier diffs in magit.

    #+begin_src elisp
      (use-package magit-delta
        :ensure t
        :hook (magit-mode . magit-delta-mode))
    #+end_src

- Keep backup/auto-save files out of my vc

  #+begin_src elisp
    (setq
     backup-dir "~/.emacs.d/bakups"
     backup-directory-alist `((".*" . ,backup-dir))
     auto-save-file-name-transforms `((".*" ,backup-dir t))
     create-lockfiles nil)
  #+end_src

- Spell checking

  #+begin_src elisp
    (use-package flyspell
      :hook
      (text-mode . flyspell-mode)
      (prog-mode . flyspell-prog-mode))
    (use-package flyspell-correct
      :after (flyspell)
      :commands (flyspell-correct-at-point
                 flyspell-correct-wrapper))
    (use-package flyspell-correct-ivy
      :after (flyspell-correct)
      :commands (flyspell-correct-ivy)
      :init (setq flyspell-correct-interface #'flyspell-correct-ivy)
      :config
      (define-key flyspell-mode-map (kbd "C-;") #'flyspell-correct-wrapper))
  #+end_src

** Org mode
:PROPERTIES:
:ID:       8b2528d8-3fd2-4076-8b1e-791df8ed9a67
:END:

- Install latest org-mode. Straight.el will install the latest org-mode, instead
  of older version pre-packaged with emacs

  #+begin_src elisp
    (use-package org)
  #+end_src

- Other settings

  #+begin_src elisp
    (setq
     org-startup-indented t
     org-startup-folded t
     org-agenda-window-setup "only-window"
     org-directory "~/Documents/org"
     org-agenda-diary-file (concat org-directory "/diary.org.gpg")
     org-contacts-file (concat org-directory "/contacts.org")
     org-ideas-file (concat org-directory "/ideas.org")
     org-inbox-file (concat org-directory "/TODOs.org")
     org-agenda-files (list org-inbox-file)
     ;;Todo keywords I need
     org-todo-keywords '((sequence "TODO(t)" "IN-PROGRESS(n)" "|" "DONE(d)" "CANCELED(c@)"))
     org-todo-keyword-faces '(("IN-PLANNING" . org-todo)
                              ("IN-PROGRESS" . "DeepSkyBlue")
                              ("CANCELED" . org-done))
     org-default-notes-file (concat org-directory "/refile.org")
     org-refile-targets '((org-agenda-files . (:maxlevel . 6)))
     org-capture-templates
     '(("d" "Diary Entry" plain (file+datetree org-agenda-diary-file) "\n<%<%I:%M %p>>\n%?\n")
       ("i" "Idea" entry (file+headline org-inbox-file "Inbox") "* %?\n%T")
       ("t" "Todo" entry (file+headline org-inbox-file "Inbox") "* TODO %?\n%U\n[[%F]]")
       ("c" "Contact" entry (file org-contacts-file) "* %^{Name}\n:PROPERTIES:\n:COMPANY %^{Company}\n:PHONE: %^{Phone}\n:END:"))
     org-log-into-drawer "LOGBOOK"
     org-log-done "time"
     org-clock-report-include-clocking-task t
     org-clock-into-drawer t
     org-fontify-done-headline t
     org-enforce-todo-dependencies t
     org-agenda-overriding-columns-format "%80ITEM(Task) %6Effort(Est){:} %6CLOCKSUM_T(Today) %6CLOCKSUM(Total)"
     org-columns-default-format "%80ITEM(Task) %6Effort(Est){:} %6CLOCKSUM_T(Today) %6CLOCKSUM(Total)"
     org-use-property-inheritance t
     org-confirm-babel-evaluate nil
     org-id-link-to-org-use-id t
     org-catch-invisible-edits 'show-and-error
     org-cycle-separator-lines 0
     org-export-allow-bind-keywords t)

    ;; org-mode settings
    (with-eval-after-load 'org
      (org-indent-mode t)
      (require 'org-id)

      (add-to-list 'org-modules "org-habit"))

  #+end_src

- Keybindings

  #+begin_src elisp
    (global-set-key (kbd "C-c c") #'org-capture)

    (spook-defkeymap
     "spook-notes" "C-c n"
     '("f" . org-roam-node-find)
     '("o" . org-roam-ui-open))

    (spook-defkeymap
     "spook-org" "C-c o"
     '("a" . org-agenda-list)
     '("A" . org-agenda)
     '("c" . org-capture)
     '("C" . org-clock-goto))
  #+end_src

- org-super-agenda
  :PROPERTIES:
  :ID:       06dd246b-30f0-4c17-ab47-8128d49f7f69
  :END:

  More/better structure in agenda view.

  #+begin_src elisp
    (use-package org-super-agenda
      :config
      (org-super-agenda-mode t)
      (setq org-super-agenda-groups
            '((:name "Work" :tag "work" :order 1)
              (:name "In Progress" :todo "IN-PROGRESS" :order 1)
              (:name "Projects" :tag "project" :order 3)
              (:name "Home" :tag "home" :order 2)
              (:name "Study" :tag "study" :order 4)
              (:name "Inbox" :tag "inbox" :order 4)
              (:name "Habits" :tag "habit" :order 5))))
  #+end_src

- org-roam
  :PROPERTIES:
  :ID:       29c74372-5882-4a72-a567-0a0cbc53cede
  :END:

  For zettelkasten style note taking

  - Setup =org-roam=

    #+begin_src elisp
      (use-package org-roam
        :init
        (setq org-roam-directory (concat org-directory "/notes/")
              org-roam-tag-sources '(prop)
              org-roam-v2-ack t)
        :config
        (org-roam-setup))
    #+end_src

  - Setup =org-roam-ui= for a pretty browser based UI

    #+begin_src elisp
      (use-package org-roam-ui
        :straight
        (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
        :after org-roam
        ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
        ;;         a hookable mode anymore, you're advised to pick something yourself
        ;;         if you don't care about startup time, use
        ;;  :hook (after-init . org-roam-ui-mode)
        :config
        (setq org-roam-ui-sync-theme t
              org-roam-ui-follow t
              org-roam-ui-update-on-save t
              org-roam-ui-open-on-start t))
    #+end_src

- org-babel

  #+begin_src elisp
    (with-eval-after-load 'org
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (plantuml . t)
         (shell . t)
         (sql . t))))
  #+end_src

- Allow adding HTML class/id to exported src blocks

  Org mode don't allow adding custom HTML class or id to exported src
  blocks, but I've found myself in need of this functionality when
  customizing published projects.

  #+begin_src elisp
    (defun spook--org-src-block-html-attrs-advice (oldfun src-block contents info)
      "Add class, id or data-* CSS attributes to html source block output.

    Allows class, id or data  attributes to be added to a source block using
    #attr_html:

        ,#+ATTR_HTML: :class myclass :id myid
        ,#+begin_src python
        print(\"Hi\")
        ,#+end_src
    "
      (let* ((old-ret (funcall oldfun src-block contents info))
             (class-tag (org-export-read-attribute :attr_html src-block :class))
             (data-attr (let ((attr (org-export-read-attribute :attr_html src-block :data)))
                          (when attr (split-string attr "="))))
             (id-tag (org-export-read-attribute :attr_html src-block :id)))
        (if (or class-tag id-tag  data-attr)
            (concat
             "<div "
             (if class-tag (format "class=\"%s\" " class-tag))
             (if id-tag (format "id=\"%s\" " id-tag))
             (if data-attr (format "data-%s=\"%s\" " (car data-attr) (cadr data-attr)))
             ">"
             old-ret
             "</div>")
          old-ret)))

    (advice-add 'org-html-src-block :around #'spook--org-src-block-html-attrs-advice)
  #+end_src

- Support exporting code blocks with syntax-highlighting

  #+begin_src elisp
    (use-package htmlize)
  #+end_src

- saunf

  Use the local repo; very risky, should change.

  #+begin_src elisp
    (use-package saunf
      :straight (saunf :type git
                       :local-repo "~/Documents/work/saunf"
                       :file "saunf.el"))
  #+end_src

** Modal editing with Meow
:PROPERTIES:
:ID:       17c2eeec-133f-49f3-b2ce-95bf3dab1188
:END:

Let's get some modal editing with some spice. I have used Evil mode
with Spacemacs, I was going to configure Evil, but let's give meow a
shot!

- Meow qwerty setup copied from https://github.com/meow-edit/meow/blob/master/KEYBINDING_QWERTY.org
  #+begin_src elisp
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev))
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       '("j" . "H-j")
       '("k" . "H-k")
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))

      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-yank)
       '("q" . meow-quit)
       '("Q" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-goto-line)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<escape>" . mode-line-other-buffer)))
  #+end_src

#+begin_src elisp
  (use-package meow
    :config
    (meow-global-mode)
    (meow-setup))
#+end_src

- Normal mode-keybindings. Mostly mimicking vim

  #+begin_src elisp
    (meow-normal-define-key
     '("z" . spook-fold)
     '("/" . swiper-isearch)
     '("?" . swiper-isearch-backward))
  #+end_src

- Leader keybindings

  #+begin_src elisp
    (meow-leader-define-key
     '("/" . counsel-git-grep)
     '("l" . lsp-mode-map)
     '("p" . projectile-command-map)
     '("e" . flycheck-command-map)
     '("w" . spook-windows)
     '("b" . spook-buffers)
     '("g" . spook-git)
     '("o" . spook-org)
     '("n" . spook-notes)
     '("t" . spook-tree))
  #+end_src

** Ivy
:PROPERTIES:
:ID:       4b16f866-dede-4d72-8fbf-95044ed1e378
:END:

#+begin_src elisp
  (use-package ivy
    :init
    (setq ivy-use-virtual-buffers t
          ivy-height 20)
    :config
    (ivy-mode 1))

  (use-package swiper
    :after (ivy)
    :config
    (global-set-key (kbd "C-s") #'swiper-isearch)
    (global-set-key (kbd "C-r") #'swiper-isearch-backward))

  (use-package counsel
    :after (ivy)
    :config
    (counsel-mode 1)
    (setq counsel-git-grep-cmd "git --no-pager rg -n --no-color -I -e \"%s\""))
#+end_src

** Looks
:PROPERTIES:
:ID:       baaa3b17-3676-4759-b2a0-dc792897862b
:END:

#+begin_src elisp
  (use-package doom-themes
    :config
    (load-theme 'doom-vibrant t))
#+end_src

Modeline

#+begin_src elisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

** Programming
:PROPERTIES:
:ID:       f88fd5b1-1170-43e3-b2b9-e3060edd7442
:END:

- Wrapping text in parens, quotes etc

  #+begin_src elisp
    (show-paren-mode 1)
    (electric-pair-mode 1)
  #+end_src

- Code folding

  #+begin_src elisp
    (use-package origami
      :config (global-origami-mode +1)
      (spook-defkeymap "spook-fold" "C-c f"
                       '("n" . origami-next-fold)
                       '("p" . origami-previous-fold)
                       '("O" . origami-open-all-nodes)
                       '("o" . origami-open-node-recursively)
                       '("r" . origami-redo)
                       '("u" . origami-undo)
                       '("C" . origami-close-all-nodes)
                       '("c" . origami-close-node-recursively)
                       '("z" . origami-recursively-toggle-node)
                       '("C-f" . origami-toggle-node)
                       '("f" . origami-recursively-toggle-node)
                       '("r" . origami-reset)
                       '("t" . origami-toggle-all-nodes)))
  #+end_src

- Flycheck for getting those in-buffer warnings errors.

  #+begin_src elisp
    (use-package flycheck
      :init
      (global-flycheck-mode t)
      ;; alias is needed for using the keymap in meow
      (defalias 'flycheck-command-map flycheck-command-map))
  #+end_src

- Projectile for managing projects.

  #+begin_src elisp
    (use-package projectile
      :init (projectile-mode +1)
      :bind (:map projectile-mode-map
                  ("s-p" . projectile-command-map)
                  ("C-c p" . projectile-command-map)))
  #+end_src

- Company mode

  I think I have a general idea of what it does, but still fuzzy on
  details. This stuff is usually taken for granted; I've been taking
  it for granted with Spacemacs for a while now I suppose.

  #+begin_src elisp
    (use-package company
      :init (global-company-mode +1))
  #+end_src

  [[https://github.com/sebastiencs/company-box/][company-box-mode]] adds icons and colors to company options.

  #+begin_src elisp
    (use-package company-box
      :hook (company-mode . company-box-mode))
  #+end_src

- LSP provides support for many languages with little cost of
  configuring. So LSP we do.

  #+begin_src elisp
    (use-package lsp-mode
      :init (setq lsp-keymap-prefix "C-c l")
      :hook
      (lsp-mode . lsp-enable-which-key-integration)
      ((typescript-mode
        typescript-tsx-mode
        js-mode
        js-jsx-mode
        python-mode
        web-mode) . lsp)
      :config
      (setq lsp-auto-guess-root t)
      (setq lsp-enable-symbol-highlighting nil)
      (setq lsp-enable-on-type-formatting nil)
      (setq lsp-enable-imenu nil)
      (setq read-process-output-max (* 1024 1024)) ;; 1mb
      (add-to-list 'lsp-language-id-configuration '(js-jsx-mode . "javascriptreact"))
      :commands lsp-deferred)

    (use-package lsp-ui
      :commands lsp-ui-mode
      :config
      (setq lsp-ui-doc-show-with-cursor t
            lsp-ui-doc-delay 1
            lsp-ui-doc-position 'at-point))

    (use-package lsp-ivy
      :config
      (define-key lsp-mode-map (kbd "C-c lga") #'lsp-ivy-workspace-symbol))
  #+end_src

- [[https://github.com/purcell/emacs-reformatter][Reformatter]] allow creating buffer/region formatters from any command.

  #+begin_src elisp
    (use-package reformatter
      :config
      (reformatter-define prettier-format
        :program (expand-file-name "node_modules/.bin/prettier"
                                   (locate-dominating-file (buffer-file-name) "node_modules"))
        :args `("--stdin-filepath" ,(buffer-file-name)))
      :hook (web-mode . prettier-format-on-save-mode))
  #+end_src

- Direnv is pretty essential for my dev workflow.

  #+begin_src elisp
    (use-package direnv
     :config
     (direnv-mode))
  #+end_src

*** Lisp
:PROPERTIES:
:ID:       828dd6e7-a386-415c-b4e1-cb5515138109
:END:

Lispy for some nasty lisp structural editing.

#+begin_src elisp
  (use-package lispy
    :hook (emacs-lisp-mode . lispy-mode))
#+end_src

Elsa provides very nice static-analysis and more for elisp
programming. First time I am trying this, hopefully it does what it
says on the box without much fuss.

#+begin_src elisp
  (use-package flycheck-elsa
    :after elsa
    :hook (emacs-lisp-mode . flycheck-elsa-setup))
#+end_src

*** Nix
#+begin_src elisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src
*** Web dev
:PROPERTIES:
:ID:       62e08f15-d996-48fd-90c3-fd6d348555be
:END:

#+begin_src elisp
  (setq css-indent-offset spook--indent-width)

  (use-package js
    :mode "\\.js'"
    :config
    (setq js-indent-level spook--indent-width)
    :hook ((js-mode . subword-mode)))

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset spook--indent-width)
    (setq web-mode-code-indent-offset spook--indent-width)
    (setq web-mode-css-indent-offset spook--indent-width)
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))

  (use-package emmet-mode
    :hook ((html-mode       . emmet-mode)
           (css-mode        . emmet-mode)
           (js-mode         . emmet-mode)
           (js-jsx-mode     . emmet-mode)
           (typescript-mode . emmet-mode)
           (typescript-tsx-mode . emmet-mode)
           (web-mode        . emmet-mode))
    :config
    (setq emmet-insert-flash-time 0.001)	; effectively disabling it
    (add-hook 'js-jsx-mode-hook #'(lambda ()
                                    (setq-local emmet-expand-jsx-className? t)))
    (add-hook 'ts-tsx-mode-hook #'(lambda ()
                                    (setq-local emmet-expand-jsx-className? t)))
    (add-hook 'web-mode-hook #'(lambda ()
                                 (setq-local emmet-expand-jsx-className? t))))

  (use-package typescript-mode
    :mode "\\.tsx?\\'")

  (use-package css-mode
    :mode "\\.s?css\\'")
#+end_src

*** Rust

#+begin_src elisp
  (use-package rustic
    :init
    (setq rustic-cargo-bin "cargo"
          lsp-rust-analyzer-cargo-watch-command "clippy")
    (push 'rustic-clippy flycheck-checkers))
#+end_src

*** Yaml

#+begin_src elisp
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")
#+end_src

*** Graphql

#+begin_src elisp
  (use-package graphql-mode
    :mode "\\.graphql\\'")
#+end_src


*** Niceties
:PROPERTIES:
:ID:       8e8563f8-2161-4af3-b072-fc3b81cc57a6
:END:

- Treemacs

  #+begin_src elisp
    (use-package treemacs
      :config
      (progn
        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode 'always)
        (treemacs-git-mode 'deferred)
        (treemacs-git-mode 'simple)
        (treemacs-hide-gitignored-files-mode nil))
      (spook-defkeymap "spook-tree" "C-c t"
                       '("0" . treemacs-select-window)
                       '("1" . treemacs-delete-other-windows)
                       '("t" . treemacs)
                       '("d" . treemacs-select-directory)
                       '("B" . treemacs-bookmark)
                       '("C-t" . treemacs-find-file)
                       '("M-t" . treemacs-find-tag)))

    (use-package treemacs-projectile
      :after (treemacs projectile))

    (use-package treemacs-icons-dired
      :hook (dired-mode . treemacs-icons-dired-enable-once))

    (use-package treemacs-magit
      :after (treemacs magit))

    (use-package treemacs-all-the-icons
      :after (treemacs)
      :config
      (treemacs-load-theme 'all-the-icons))
  #+end_src
** Applications

- Ledger

  #+begin_src elisp
    (use-package ledger-mode
      :mode "\\.ledger\\'")
  #+end_src

- Desktop save/restore

  Need to keep this at the bottom to ensure everything else is loaded
  before desktop is restored; otherwise it restores buffers with
  major-modes not loaded.

  Eyebrowse allow saving on desktop-save, perhaps it'll be a good idea
  to start from where I leave off. I'd certainly like my workspaces
  restored. Don't want to create/rename them all the time.

  #+begin_src elisp
    (desktop-save-mode t)
    (desktop-read)
  #+end_src

