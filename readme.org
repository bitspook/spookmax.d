#+PROPERTY: header-args :tangle ./init.el

* Spook max ðŸ‘»
:PROPERTIES:
:ID:       884752cb-1a69-406a-9083-ffe764c84f10
:END:

My [[https://github.com/raxod502/straight.el][straight.el]] based emacs configuration.

- Bootstrap

  #+begin_src elisp :tangle ./early-init.el
    ;;; core-ui.el -*- lexical-binding: t; -*-
    (setq package-enable-at-startup nil)

    ;;
    ;;; Bootstrap

    ;; Contrary to what many Emacs users have in their configs, you don't need
    ;; more than this to make UTF-8 the default coding system:
    (set-language-environment "UTF-8")

    ;; set-language-enviornment sets default-input-method, which is unwanted
    (setq default-input-method nil)
  #+end_src

** Initialize straight.el itself
:PROPERTIES:
:ID:       635cd7c4-e3cb-4a0e-a722-6fa8f2035ea0
:END:

#+begin_src elisp :tangle ./init.el
  (defvar bootstrap-version)
  (setq straight-use-package-by-default t)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  #+end_src

  - Install =use-package=
  #+begin_src elisp
  (straight-use-package 'use-package)
  #+end_src

** Preliminary setup
:PROPERTIES:
:ID:       704db7c8-f339-48cc-8e2c-d680da5899fd
:END:

- Disable the ugly-ass toolbar, scroll-bars and menu-bar

  #+begin_src elisp :tangle ./init.el
    (setq inhibit-startup-screen t
          use-dialog-box nil)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (tooltip-mode -1)
  #+end_src

- Make emacs a little transparent
 #+begin_src elisp :tangle ./init.el
   (set-frame-parameter (selected-frame) 'alpha '(90 . 50))
   (add-to-list 'default-frame-alist '(alpha . (90 . 50)))
 #+end_src

UI fixes copied from Doom
https://github.com/hlissner/doom-emacs/blob/develop/core/core-ui.el

- Scrolling
  #+begin_src elisp
    ;;; Scrolling

    (setq hscroll-margin 2
          hscroll-step 1
          ;; Emacs spends too much effort recentering the screen if you scroll the
          ;; cursor more than N lines past window edges (where N is the settings of
          ;; `scroll-conservatively'). This is especially slow in larger files
          ;; during large-scale scrolling commands. If kept over 100, the window is
          ;; never automatically recentered.
          scroll-conservatively 101
          scroll-margin 0
          scroll-preserve-screen-position t
          ;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
          ;; for tall lines.
          auto-window-vscroll nil
          ;; mouse
          mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
          mouse-wheel-scroll-amount-horizontal 2)
  #+end_src

- Cursors

  #+begin_src elisp
    ;;; Cursor

    ;; The blinking cursor is distracting, but also interferes with cursor settings
    ;; in some minor modes that try to change it buffer-locally (like treemacs) and
    ;; can cause freezing for folks (esp on macOS) with customized & color cursors.
    (blink-cursor-mode -1)

    ;; Don't blink the paren matching the one at point, it's too distracting.
    (setq blink-matching-paren nil)

    ;; Don't stretch the cursor to fit wide characters, it is disorienting,
    ;; especially for tabs.
    (setq x-stretch-cursor nil)
  #+end_src

- Window/Frame

  #+begin_src elisp
    ;; A simple frame title
    (setq frame-title-format '("%b")
          icon-title-format frame-title-format)

    ;; Don't resize the frames in steps; it looks weird, especially in tiling window
    ;; managers, where it can leave unseemly gaps.
    (setq frame-resize-pixelwise t)

    ;; But do not resize windows pixelwise, this can cause crashes in some cases
    ;; when resizing too many windows at once or rapidly.
    (setq window-resize-pixelwise nil)

    ;; Favor vertical splits over horizontal ones. Monitors are trending toward
    ;; wide, rather than tall.
    (setq split-width-threshold 160
          split-height-threshold nil)
  #+end_src

- Minibuffer

  #+begin_src elisp
    ;;
    ;;; Minibuffer

    ;; Allow for minibuffer-ception. Sometimes we need another minibuffer command
    ;; while we're in the minibuffer.
    (setq enable-recursive-minibuffers t)

    ;; Show current key-sequence in minibuffer ala 'set showcmd' in vim. Any
    ;; feedback after typing is better UX than no feedback at all.
    (setq echo-keystrokes 0.02)

    ;; Expand the minibuffer to fit multi-line text displayed in the echo-area. This
    ;; doesn't look too great with direnv, however...
    (setq resize-mini-windows 'grow-only)

    ;; Typing yes/no is obnoxious when y/n will do
    (fset #'yes-or-no-p #'y-or-n-p)

    ;; Try to keep the cursor out of the read-only portions of the minibuffer.
    (setq minibuffer-prompt-properties '(read-only t intangible t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Don't resize the frames in steps; it looks weird, especially in tiling window
    ;; managers, where it can leave unseemly gaps.
    (setq frame-resize-pixelwise t)

    ;; But do not resize windows pixelwise, this can cause crashes in some cases
    ;; when resizing too many windows at once or rapidly.
    (setq window-resize-pixelwise nil)
  #+end_src

- Introspection
  :PROPERTIES:
  :ID:       e17d83de-251c-4407-b2ea-ca9c428e5ea1
  :END:

  Setup =which-key= for easy keys discovery

  #+begin_src elisp
    (use-package which-key
      :config
      (which-key-mode t))
  #+end_src

- Highlighting
  :PROPERTIES:
  :ID:       79c1e2a9-c52e-4660-ba70-f6f1f98f7d4e
  :END:

  Setting this to =nil= for now; until I configure a decent theme which don't
  cause the problem. The problem is that, with the default themes at least, the
  highlighted line and color of selection is same. So it become impossible to
  tell which part is selection and which is highlighted line.

  #+begin_src elisp
    (global-hl-line-mode nil)
  #+end_src

- Line numbers
  :PROPERTIES:
  :ID:       2b554619-a8c0-4bd0-8ab0-8107c52a6e7e
  :END:

  #+begin_src elisp
  (global-display-line-numbers-mode 1)
  #+end_src

- Magit

  #+begin_src elisp
    (use-package magit
      :config
      (setq magit-display-buffer-function
              'magit-display-buffer-fullframe-status-v1))
  #+end_src

** Org mode
:PROPERTIES:
:ID:       8b2528d8-3fd2-4076-8b1e-791df8ed9a67
:END:

- Install latest org-mode. Straight.el will install the latest org-mode, instead
  of older version pre-packaged with emacs

  #+begin_src elisp
    (use-package org)
  #+end_src

- Other settings

  #+begin_src elisp
    (setq
     org-startup-indented t
     org-agenda-window-setup "only-window"
     org-directory "~/Documents/org"
     org-agenda-diary-file (concat org-directory "/diary.org.gpg")
     org-contacts-file (concat org-directory "/contacts.org")
     org-ideas-file (concat org-directory "/ideas.org")
     org-inbox-file (concat org-directory "/TODOs.org")
     org-agenda-files (list org-inbox-file)
     ;;Todo keywords I need
     org-todo-keywords '((sequence "TODO(t)" "IN-PROGRESS(n)" "|" "DONE(d)" "CANCELED(c@)"))
     org-todo-keyword-faces '(("IN-PLANNING" . org-todo)
                              ("IN-PROGRESS" . "DeepSkyBlue")
                              ("CANCELED" . org-done))
     org-default-notes-file (concat org-directory "/refile.org")
     org-refile-targets '((org-agenda-files . (:maxlevel . 6)))
     org-capture-templates
     '(("d" "Diary Entry" plain (file+datetree org-agenda-diary-file) "\n<%<%I:%M %p>>\n%?\n")
       ("i" "Idea" entry (file+headline org-inbox-file "Inbox") "* %?\n%T")
       ("t" "Todo" entry (file+headline org-inbox-file "Inbox") "* TODO %?\n%U\n[[%F]]")
       ("c" "Contact" entry (file org-contacts-file) "* %^{Name}\n:PROPERTIES:\n:COMPANY %^{Company}\n:PHONE: %^{Phone}\n:END:"))
     org-log-into-drawer "LOGBOOK"
     org-clock-report-include-clocking-task t
     org-clock-into-drawer t
     org-fontify-done-headline t
     org-enforce-todo-dependencies t
     org-agenda-overriding-columns-format "%80ITEM(Task) %6Effort(Est){:} %6CLOCKSUM_T(Today) %6CLOCKSUM(Total)"
     org-columns-default-format "%80ITEM(Task) %6Effort(Est){:} %6CLOCKSUM_T(Today) %6CLOCKSUM(Total)"
     org-use-property-inheritance t
     org-confirm-babel-evaluate nil
     org-id-link-to-org-use-id t
     org-catch-invisible-edits 'show-and-error
     org-cycle-separator-lines 0
     org-export-allow-bind-keywords t)

    ;; org-mode settings
    (with-eval-after-load 'org
      (org-indent-mode t)
      (require 'org-id)

      (add-to-list 'org-modules "org-habit"))

  #+end_src

  - org-babel languages

    #+begin_src elisp
      (with-eval-after-load 'org
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
           (plantuml . t)
           (shell . t)
           (sql . t))))
    #+end_src

*** org-super-agenda
:PROPERTIES:
:ID:       06dd246b-30f0-4c17-ab47-8128d49f7f69
:END:

More/better structure in agenda view.

#+begin_src elisp
  (use-package org-super-agenda
    :config
    (org-super-agenda-mode t)
    (setq org-super-agenda-groups
          '((:name "Work" :tag "work" :order 1)
            (:name "In Progress" :todo "IN-PROGRESS" :order 1)
            (:name "Projects" :tag "project" :order 3)
            (:name "Home" :tag "home" :order 2)
            (:name "Study" :tag "study" :order 4)
            (:name "Inbox" :tag "inbox" :order 4)
            (:name "Habits" :tag "habit" :order 5))))
#+end_src

*** org-roam
:PROPERTIES:
:ID:       29c74372-5882-4a72-a567-0a0cbc53cede
:END:

For zettelkasten style note taking

- Setup =org-roam=

  #+begin_src elisp
    (use-package org-roam
      :init
      (setq org-roam-directory (concat org-directory "/notes/")
            org-roam-tag-sources '(prop)
            org-roam-v2-ack t)
      :config
      (org-roam-setup))
  #+end_src

- Setup =org-roam-ui= for a pretty browser based UI

  #+begin_src elisp
    (use-package org-roam-ui
      :straight
      (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
      :after org-roam
      ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
      ;;         a hookable mode anymore, you're advised to pick something yourself
      ;;         if you don't care about startup time, use
      ;;  :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t))
  #+end_src

** Modal editing with Meow
:PROPERTIES:
:ID:       17c2eeec-133f-49f3-b2ce-95bf3dab1188
:END:

Let's get some modal editing with some spice. I have used Evil mode
with Spacemacs, I was going to configure Evil, but let's give meow a
shot!

Meow qwerty setup copied from https://github.com/meow-edit/meow/blob/master/KEYBINDING_QWERTY.org
#+begin_src elisp
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . mode-line-other-buffer)))
#+end_src

#+begin_src elisp
  (use-package meow
    :config
    (meow-global-mode)
    (meow-setup))
#+end_src

- Custom meow shortcuts

  #+begin_src elisp
    (meow-normal-define-key
     '("/" . swiper-isearch)
     '("?" . swiper-isearch-backward))
  #+end_src

** Ivy
:PROPERTIES:
:ID:       4b16f866-dede-4d72-8fbf-95044ed1e378
:END:

#+begin_src elisp
  (use-package ivy
    :init
    (setq ivy-use-virtual-buffers t
          ivy-height 20)
    :config
    (ivy-mode 1))

  (use-package swiper
    :after (ivy)
    :config
    (global-set-key (kbd "C-s") #'swiper-isearch)
    (global-set-key (kbd "C-r") #'swiper-isearch-backward))

  (use-package counsel
    :after (ivy)
    :config
    (counsel-mode 1))
#+end_src

** Looks
:PROPERTIES:
:ID:       baaa3b17-3676-4759-b2a0-dc792897862b
:END:

#+begin_src elisp
  (use-package doom-themes
    :config
    (load-theme 'doom-material t))
#+end_src

Modeline

#+begin_src elisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src
